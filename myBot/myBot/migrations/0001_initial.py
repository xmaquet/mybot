# Generated by Django 2.1.4 on 2019-01-20 10:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('botModel', models.CharField(max_length=50, verbose_name='modèle')),
                ('botName', models.CharField(blank=True, max_length=50, null=True, verbose_name='nom')),
                ('botOwner', models.CharField(blank=True, max_length=100, null=True, verbose_name='propriétaire')),
                ('localization', models.CharField(choices=[('loc', 'Local'), ('rem', 'Remote')], default='Loc', help_text='Local : le Bot est sur la même machine que le système ', max_length=20, verbose_name='localisation')),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('reg_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Controler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('code', models.CharField(max_length=20)),
                ('address', models.CharField(help_text='paste or select', max_length=50, null=True, verbose_name='adresse')),
                ('interface', models.CharField(choices=[('usb', 'USB-Serial'), ('ip-eth', 'IP on Ethernet'), ('ip-wifi', 'IP on Wifi')], default='usb', max_length=10, verbose_name="type d'interface")),
            ],
        ),
        migrations.CreateModel(
            name='ControlerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=20)),
                ('model', models.CharField(max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('maxDigitalPins', models.PositiveIntegerField()),
                ('maxAnalogPins', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('code', models.CharField(max_length=20)),
                ('pinNum', models.PositiveIntegerField(blank=True, help_text='donné à titre indicatif', null=True, verbose_name='n° de broche')),
                ('prefix', models.CharField(help_text="utilisé dans l'adressage du device", max_length=10, null=True, verbose_name="préfixe pour l'adressage")),
                ('index', models.PositiveIntegerField(help_text='combiné au préfixe pour adressage', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('code', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myBot.Bot', verbose_name='bot')),
            ],
        ),
        migrations.CreateModel(
            name='PowerLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('code', models.CharField(max_length=20)),
                ('maxCurrent', models.DecimalField(decimal_places=1, default=0, help_text='unité = A', max_digits=5, null=True, verbose_name='courant maximal prévu')),
            ],
        ),
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='intitulé')),
                ('code', models.CharField(default='service', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServoType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=20, null=True, verbose_name='marque ou modèle (ou standard)')),
                ('type', models.CharField(choices=[('lin', 'Linéaire'), ('ang', 'Angulaire')], default='ang', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='SpeedClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, null=True)),
                ('timeInSec', models.PositiveIntegerField(verbose_name='temps en secondes')),
                ('move', models.PositiveIntegerField(null=True, verbose_name='valeur du mouvement')),
                ('unit', models.CharField(max_length=20, null=True, verbose_name='unité de mouvement')),
            ],
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('device_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myBot.Device')),
                ('closeLevel', models.CharField(choices=[('Low', 'Niveau bas'), ('High', 'Niveau haut')], default='Low', help_text='précise le niveau à donner à la broche pour fermer le relais', max_length=5, verbose_name='niveau fermé')),
            ],
            bases=('myBot.device',),
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('device_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myBot.Device')),
                ('mesureUnit', models.CharField(max_length=20, null=True, verbose_name='unité de mesure')),
            ],
            bases=('myBot.device',),
        ),
        migrations.CreateModel(
            name='Servo',
            fields=[
                ('device_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myBot.Device')),
                ('rev', models.BooleanField(help_text='inverser le sens de fonctionnement', verbose_name='reverse')),
                ('toggle', models.BooleanField(help_text='le servo se comporte comme un interrupteur', verbose_name='trigger')),
                ('min', models.PositiveIntegerField(default=0, help_text='en action, le servo ne pourra pas aller sous cette valeur', verbose_name='valeur minimale')),
                ('max', models.PositiveIntegerField(default=180, help_text='en action, le servo ne pourra pas aller au-dessus de cette valeur', verbose_name='valeur maximale')),
            ],
            bases=('myBot.device',),
        ),
        migrations.AddField(
            model_name='servotype',
            name='speedClass',
            field=models.ForeignKey(help_text='la classe de vitesse est indispensable pour moduler la vitesse du servo', null=True, on_delete=django.db.models.deletion.CASCADE, to='myBot.SpeedClass', verbose_name='classe de vitesse'),
        ),
        migrations.AddField(
            model_name='function',
            name='part',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='myBot.Part'),
        ),
        migrations.AddField(
            model_name='device',
            name='controler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myBot.Controler', verbose_name='contrôleur de rattachement'),
        ),
        migrations.AddField(
            model_name='controler',
            name='controlerType',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='myBot.ControlerType', verbose_name='type de contrôleur'),
        ),
        migrations.AddField(
            model_name='controler',
            name='part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myBot.Part', verbose_name='A quelle partie appartient ce contrôleur ?'),
        ),
        migrations.AddField(
            model_name='servo',
            name='servoType',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='myBot.ServoType', verbose_name='type de servo'),
        ),
    ]
